package com.web.erp.service;

import java.io.File;
import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.web.erp.dao.PrmDao;
import com.web.erp.vo.Prm;
import com.web.erp.vo.PrmSch;

@Service
public class PrmService {
	@Autowired
	private PrmDao dao;
	
	PasswordEncoder passwordEncoder;
	
	public List<Prm> prm_getStoreName(Prm prm_store){
		if(prm_store.getStore_name()==null) prm_store.setStore_name("");
		return dao.prm_getStoreName(prm_store);
	}
//	public List<Prm> getStoreByName(Prm prm_store){
//		if(prm_store.getStore_name()==null) prm_store.setStore_name("");
//		System.out.println("입력값");
//		System.out.println(prm_store.getStore_name());
//		
//		System.out.println("결과값");
//		for(Prm p:dao.getStoreByName(prm_store)) {
//			System.out.println(p.getStore_name());
//		}
//		
//		return dao.getStoreByName(prm_store);
//	}
	
	
	public List<Prm> prm_empList(Prm sch){
		return dao.prm_empList(sch);
	}
	
	public Prm empDetail(int employee_num){
		return dao.empDetail(employee_num);
	}
	
	@Value("${upload}")
	private String upload;
	public String updatePhoto(MultipartFile file, int employee_num, String employee_name) {
		String fname = file.getOriginalFilename();
		String Extension = fname.substring(fname.lastIndexOf("."));
		String newFileName = employee_num+"_"+employee_name+Extension;
		String msg = "파일 업로드 성공!!";
		String employee_photo=newFileName;
		if(fname!=null && !fname.trim().equals("")) {
			File f = new File(upload+newFileName);
			try {
				file.transferTo(f);
			} catch (IllegalStateException e) {
				msg = "예외발생1:"+e.getMessage();
			} catch (IOException e) {
				msg = "예외발생2:"+e.getMessage();
			}
			if(msg.equals("파일 업로드 성공!!")) {
				System.out.println("파일 업로드 근황 : "+msg);
			}
		}
		return dao.updatePhoto(employee_photo, employee_num, employee_name)>0?
				"사진 등록 성공":"사진 등록 실패";
	}
	
	public Prm chkEmp(Prm chk) {
		if(dao.chkEmp(chk)==null) {
			return null;
		}else {
			return dao.chkEmp(chk);
		}
	}
	
	public String insertEmployee(Prm insert) {
		if(chkEmp(insert)!=null) {
			return chkEmp(insert).getStore_name()+"의 "+chkEmp(insert).getEmployee_name()+" "+chkEmp(insert).getJob_level()+"의 정보와 중복됩니다.\n입력값을 다시 확인해주세요";
		}else {
			
			BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
			
			String password = insert.getPassword();
			
			String hashed = passwordEncoder.encode(password);
			
			insert.setPassword(hashed);
			
			return dao.insertEmployee(insert)>0?""+dao.schSeq():"등록실패";
		}
	}
	
	public Prm schStorekeeper(Prm prm) {
		return dao.schStorekeeper(prm);
	}
	
	public String uptEmployee(Prm upt) {
		if(upt.getResignation_day()==null) upt.setResignation_day("");
		if(chkEmp(upt)!=null && chkEmp(upt).getEmployee_num()!=upt.getEmployee_num()) {
			return chkEmp(upt).getStore_name()+"의 "+chkEmp(upt).getEmployee_name()+" "+chkEmp(upt).getJob_level()+"의 정보와 중복됩니다.\n입력값을 다시 확인해주세요";
		}else {
			return dao.uptEmployee(upt)>0?"직원 정보 수정이 완료되었습니다":"수정실패";
		}
	}
	
	public String delEmployee(Prm del) {
		if(del.getResignation_day()==null || del.getResignation_day().equals("")) return "퇴사자만 정보 삭제가 가능합니다";
		return dao.delEmployee(del)>0?"직원 삭제 완료":"삭제실패";
	}
	
	
	public List<PrmSch> schWords(PrmSch prmschW){
		// 초기값 처리로 전체 데이터 및 검색 처리
		if(prmschW.getSchType()==null) prmschW.setSchType("employee_num");
		if(prmschW.getSchWord()==null) prmschW.setSchWord("");
		
		// 페이징 처리 - 불러올 전체 데이터 건수
		prmschW.setCount(dao.schCountW(prmschW));
		if(prmschW.getPageSize()==0) prmschW.setPageSize(10);
		
		// 페이지 갯수 설정(전체 데이터 수에서 -1 하고, 보여줄 데이터 건수(getPageSize)로 나눈 다움에 전체값에 1을 더한다.
		// ex) 51건의 데이터가 있고, 한 페이지에 10개를 설정한다면, ((51-1)/10)+1 = 6개의 페이지
		int pageCnt = (int)Math.ceil(prmschW.getCount()/(double)prmschW.getPageSize());
		prmschW.setPageCount(pageCnt);
		
		if(prmschW.getCurPage()==0) prmschW.setCurPage(1);
		if(prmschW.getCurPage()>prmschW.getPageCount()) {
			prmschW.setCurPage(prmschW.getPageCount());
		}
		
		prmschW.setStart(((prmschW.getCurPage()-1)*prmschW.getPageSize())+1);
		prmschW.setEnd(prmschW.getCurPage()*prmschW.getPageSize());
		
		prmschW.setBlockSize(5);
		int blockNum = (int)Math.ceil(prmschW.getCurPage()/
				(double)prmschW.getBlockSize());
		prmschW.setStartBlock((blockNum-1)*
				prmschW.getBlockSize()+1);
		prmschW.setEndBlock(blockNum*prmschW.getBlockSize());
		int endBlock = blockNum*prmschW.getBlockSize();
		if(endBlock>prmschW.getPageCount()) {
			endBlock = prmschW.getPageCount();
		}
		prmschW.setEndBlock(endBlock);
		
		System.out.println("입력한 검색타입 "+prmschW.getSchType());
		System.out.println("입력한 검색값 "+prmschW.getSchWord());
		
		return dao.schWords(prmschW);
		
		
	}
	
	public List<PrmSch> schDates(PrmSch prmschD){
		// if(prmschD.getSchDate()==null) prmschD.setSchDate("");
		if(prmschD.getSchDateWord()==null) prmschD.setSchDateWord("");
		
		// 페이징 처리 - 불러올 전체 데이터 건수
		prmschD.setCount(dao.schCountW(prmschD));
		if(prmschD.getPageSize()==0) prmschD.setPageSize(10);
		
		// 페이지 갯수 설정(전체 데이터 수에서 -1 하고, 보여줄 데이터 건수(getPageSize)로 나눈 다움에 전체값에 1을 더한다.
		// ex) 51건의 데이터가 있고, 한 페이지에 10개를 설정한다면, ((51-1)/10)+1 = 6개의 페이지
		int pageCnt = ((prmschD.getCount()-1)/prmschD.getPageSize())+1;
		prmschD.setPageCount(pageCnt);
		
		if(prmschD.getCurPage()==0) prmschD.setCurPage(1);
		if(prmschD.getCurPage()>prmschD.getPageCount()) {
			prmschD.setCurPage(prmschD.getPageCount());
		}
		
		prmschD.setStart(((prmschD.getCurPage()-1)*prmschD.getPageSize())+1);
		prmschD.setEnd(prmschD.getCurPage()*prmschD.getPageSize());
		
		prmschD.setBlockSize(5);
		int blockNum = ((prmschD.getCurPage()-1)*prmschD.getBlockSize())+1;
		prmschD.setStartBlock(((blockNum-1)*prmschD.getBlockSize())+1);
		prmschD.setEndBlock(blockNum*prmschD.getBlockSize());
		int endBlock = blockNum*prmschD.getBlockSize();
		if(endBlock>prmschD.getPageCount()) {
			endBlock = prmschD.getPageCount();
		}
		prmschD.setEndBlock(endBlock);
		
		return dao.schDates(prmschD);
	}
	
	public int schCountW(PrmSch prmschW) {
		return dao.schCountW(prmschW);
	}
	
	public int schCountD(PrmSch prmschD) {
		return dao.schCountD(prmschD);
	}
	
	
	
	
}








