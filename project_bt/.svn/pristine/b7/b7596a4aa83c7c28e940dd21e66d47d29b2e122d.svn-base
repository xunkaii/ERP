package com.web.erp.controller;

import java.util.List;

import org.apache.ibatis.annotations.Param;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.web.erp.service.DashBoardService;
import com.web.erp.service.SessionService;
import com.web.erp.vo.DashBoard;
import com.web.erp.vo.Employee;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;

@Controller
public class SessionController {
	
	@Autowired
	private SessionService service;
	@Autowired
	private DashBoardService dbService;
	
	@GetMapping("index")
	public String index(Model d) {
		d.addAttribute("emp", dbService.empCnt());
		d.addAttribute("store", dbService.storeCnt());
		d.addAttribute("brand", dbService.brandCnt());
		d.addAttribute("item", dbService.itemCnt());
		d.addAttribute("saleByBrand", dbService.saleCntByBrand());
		return "index";
	}
	@RequestMapping("saleCntByBrand")
	public ResponseEntity<List<DashBoard>> saleCntByBrand(){
		return ResponseEntity.ok(dbService.saleCntByBrand());
	}
	@RequestMapping("totSaleByMonth")
	public ResponseEntity<List<DashBoard>> totSaleByMonth(){
		return ResponseEntity.ok(dbService.totSaleByMonth());
	}
	@RequestMapping("totSaleByStore")
	public ResponseEntity<List<DashBoard>> totSaleByStore(){
		return ResponseEntity.ok(dbService.totSaleByStore());
	}
	@RequestMapping("orderEndDateDesc")
	public ResponseEntity<List<DashBoard>> orderEndDateDesc(){
		return ResponseEntity.ok(dbService.orderEndDateDesc());
	}
	@RequestMapping("brandByBrandNum")
	public ResponseEntity<List<DashBoard>> brandByBrandNum(
						@RequestParam(value="brand",defaultValue="")String brand){
		return ResponseEntity.ok(dbService.brandByBrandNum(brand));
	}
	
	@GetMapping("login")
	public String login() {
		return "login";
	}
	
	@PostMapping("login")
	public String session(@RequestParam(value="id", defaultValue="") String id,
						@RequestParam(value="password", defaultValue="") String password,
						Model model,HttpServletRequest request) {
		
		
		Employee employee =  service.sessionEmp(id, password);
		
		if(employee == null) {
			model.addAttribute("loginFail","아이디 또는 비밀번호가 틀렸습니다.");
			return "login";
		}
		
		if(employee != null) {
			request.getSession().invalidate();
			HttpSession session = request.getSession(true);
			session.setAttribute("session", employee);
			if(employee.getAuth() == 1) {
				return "redirect:/index";
			}
		}
		
		
		return "redirect:/orderReg";
	}
	
	@RequestMapping("logout")
	public String logout(HttpServletRequest request) {
		
		HttpSession logout = request.getSession(false);
		
		if(logout != null) {
			logout.invalidate();
		}
		
		return "redirect:/login";
	}
	
}
