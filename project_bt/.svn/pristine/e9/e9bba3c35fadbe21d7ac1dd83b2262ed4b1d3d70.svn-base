package com.web.erp.security.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import com.web.erp.security.auth.EmployeeDetailService;
import com.web.erp.security.provider.EmployeeAuthenticatorProvider;

import lombok.RequiredArgsConstructor;

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
public class EmployeeSecurityConfig {
	
	@Autowired
	EmployeeAuthenticatorProvider employeeAuthenticatorProvider;
	
	@Autowired
	EmployeeDetailService employeeDetailService;
	
    @Autowired
    public void configure (AuthenticationManagerBuilder auth) throws Exception {
        auth.authenticationProvider(employeeAuthenticatorProvider);
    }
	
    
    @Bean
    public SecurityFilterChain employeeSecurityFilterChain (HttpSecurity http) throws Exception {
        http.csrf().disable();

        http.authorizeHttpRequests(authorize -> {
        	
            try {
                authorize
                .requestMatchers(  
                		new AntPathRequestMatcher("/css/**"), new AntPathRequestMatcher("/images/**"), 
                		new AntPathRequestMatcher("/js/**"),
                		new AntPathRequestMatcher("/a00_com/**"), 
                		new AntPathRequestMatcher("/erpBt/**"),
                		new AntPathRequestMatcher("/WEB-INF/views/**")
                		)
                .permitAll() // 해당 경로는 인증 없이 접근 가능
                //.requestMatchers(new AntPathRequestMatcher("/member/**"),new AntPathRequestMatcher("/board/**")) // 해당 경로는 인증이 필요
                //.requestMatchers(new AntPathRequestMatcher("/board/**")) // 해당 경로는 인증이 필요
                
                // 대시보드 (사장)
                .requestMatchers(new AntPathRequestMatcher("/WEB-INF/views/index.jsp")).hasRole("사장")
                // 점포리스트 (사장)
                .requestMatchers(new AntPathRequestMatcher("/WEB-INF/views/storeManage.jsp")).hasAnyRole("사장")
                // 인사관리 (본사 모두)
                .requestMatchers(new AntPathRequestMatcher("/WEB-INF/views/hrm.jsp")).hasAnyRole("사장","팀장","본사직원")
                // 발주등록 (점포 점주, 매니저)
                .requestMatchers(new AntPathRequestMatcher("/WEB-INF/views/orderReg.jsp")).hasAnyRole("점주","매니저")
                // 결재신청 (본사 모두)
                .requestMatchers(new AntPathRequestMatcher("/WEB-INF/views/apvReg.jsp")).hasAnyRole("사장","팀장","본사직원")
                // 결재승인 (사장, 팀장)
                .requestMatchers(new AntPathRequestMatcher("/WEB-INF/views/apvList.jsp")).hasAnyRole("사장","팀장")
                // 결재현황 (본사 모두)
                .requestMatchers(new AntPathRequestMatcher("/WEB-INF/views/apvCurrent.jsp")).hasAnyRole("사장","팀장","본사직원")
                
                
                // 매출관리(본사)
                .requestMatchers(new AntPathRequestMatcher("/WEB-INF/views/salesOfCompany.jsp")).hasAnyRole("사장","팀장")
                // 매출관리(점포)
                .requestMatchers(new AntPathRequestMatcher("/WEB-INF/views/salesOfStore.jsp")).hasAnyRole("점주","매니저")
                
                .anyRequest()
                .authenticated() // 로그인되어 있으면 접근 가능
                //.hasAnyRole("USER", "ADMIN") // ROLE 이 USER, ADMIN 가 포함된 경우에만 인증 가능
                //.hasAnyRole("USER") // ROLE 이 USER, ADMIN 가 포함된 경우에만 인증 가능
                
                
                
            .and()
                .formLogin()
                .loginPage("/loginForm") // 로그인 페이지 설정
                .loginProcessingUrl("/loginForm/login") // 로그인 처리 URL 설정
                .defaultSuccessUrl("/main") // 로그인 성공 후 이동할 페이지
                .successHandler(new EmployeeAuthSuccessHandler()) // 로그인 성공 후 처리할 핸들러
                .failureHandler(new EmployeeAuthFailureHandler()) // 로그인 실패 후 처리할 핸들러
                .permitAll()
            .and()
                .logout()
                .logoutUrl("/loginForm/logout") // 로그아웃 처리 URL 설정
                .logoutSuccessUrl("/loginForm?logout=1") // 로그아웃 성공 후 이동할 페이지
                .deleteCookies("JSESSIONID"); // 로그아웃 후 쿠키 삭제
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        });
        
        
        http.rememberMe()
                .key("ERP") // 인증 토큰 생성시 사용할 키
                .tokenValiditySeconds(60 * 60 * 24 * 7) // 인증 토큰 유효 시간 (초)
                .userDetailsService(employeeDetailService) // 인증 토큰 생성시 사용할 UserDetailsService
                .rememberMeParameter("remember-me"); // 로그인 페이지에서 사용할 파라미터 이름

		
        return http.build();
    }
    
}
